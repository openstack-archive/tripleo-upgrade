---
# This is file and plugin.spec are required by Infrared project
- hosts: undercloud
  gather_facts: true
  become: true
  become_method: sudo
  become_user: stack
  vars:
    # Explicit ansible_python_interpreter to allow connecting
    # to different OS releases (EL7/8) while using delegate_to.
    ansible_python_interpreter: /usr/libexec/platform-python
    workload_launch: "{{ install.upgrade.workload | bool }}"
    workload_memory: "{{ install.upgrade.workloadmemory }}"
    workload_user: "{{ install.upgrade.workloaduser }}"
    workload_disk: "{{ install.upgrade.workloaddisk }}"
    workload_vcpu: "{{ install.upgrade.workloadvcpu }}"
    workload_swap: "{{ install.upgrade.workloadswap }}"
    undercloud_upgrade: "{{ install.undercloud.upgrade | bool }}"
    undercloud_os_upgrade: "{{ install.undercloud.os.upgrade | bool }}"
    undercloud_reboot: "{{ install.undercloud.reboot | bool }}"
    overcloud_upgrade: "{{ install.overcloud.upgrade | bool }}"
    upgrade_workarounds: "{{ install.upgrade.workarounds | bool }}"
    upstream_container_images: "{{ install.upstream.container.images | bool }}"
    use_local_docker_registry: "{{ install.upgrade.docker.local.registry | bool }}"
    docker_registry_url: "{{ install.upgrade.docker.registry.url }}"
    undercloud_update: "{{ install.undercloud.update | bool }}"
    overcloud_update: "{{ install.overcloud.update | bool }}"
    updates_workarounds: "{{ install.updates.workarounds | bool }}"
    l3_agent_connectivity_check: "{{ install.upgrade.floatingip.check | bool }}"
    compute_evacuate: "{{ install.upgrade.compute.evacuate | bool }}"
    controller_reboot: "{{ install.upgrade.controller.reboot | bool }}"
    controller_upgrade_post: "{{ install.upgrade.controller.post | bool }}"
    force_reboot: "{{ install.upgrade.reboot.force | bool }}"
    upgrade_remove_rpm: "{{ install.upgrade.remove.rpm | bool }}"
    upgrade_hci: "{{ install.upgrade.hci | bool }}"
    overcloud_rc: "{{ working_dir }}/{{ install.overcloud.stack }}rc"
    overcloud_stack_name: "{{ install.overcloud.stack }}"
    ffu_undercloud_os_upgrade: "{{ install.undercloud.ffu.os.upgrade | bool }}"
    ffu_undercloud_upgrade: "{{ install.undercloud.ffu.upgrade | bool }}"
    ffu_undercloud_releases: "{{ install.undercloud.ffu.releases }}"
    ffu_undercloud_repo_type: "{{ install.undercloud.ffu.repo }}"
    ffu_upgrade_workarounds: "{{ install.upgrade.ffu.workarounds | bool }}"
    ffu_overcloud_upgrade: "{{ install.overcloud.ffu.upgrade | bool }}"
    ffu_overcloud_releases: "{{ install.overcloud.ffu.releases }}"
    ffu_overcloud_repo_type: "{{ install.overcloud.ffu.repo }}"
    ffu_bulk: "{{ install.overcloud.ffu.bulk | bool }}"
    ffu_computes_rolling: "{{ install.overcloud.ffu.compute.rolling }}"
    overcloud_ssh_user: "{{ install.overcloud.ssh.user }}"
    l3_agent_failover_check: "{{ install.upgrade.l3agent.failover.check | bool }}"
    nova_actions_check: "{{ install.upgrade.nova.actions.check | bool }}"
    rhsm_overcloud_env: "{{ install.rhsm.overcloud.env }}"
    enforce_rhel: "{{ install.enforce.rhel | bool }}"
  tasks:
    - block:
        - name: Set upgrade workload image
          set_fact:
            workload_image_url: "{{ install.upgrade.workloadimage }}"
          when: install.upgrade.workloadimage

        - name: Set deployment-files base
          set_fact:
            container_registry_file: "{{ install.deployment.files | basename }}/docker-images.yaml"
          when: install.deployment.files
      tags:
        - always
    - include_role:
        name: tripleo-upgrade
