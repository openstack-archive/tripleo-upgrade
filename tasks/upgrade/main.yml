---
- name: create undercloud upgrade scripts
  include_tasks: create-undercloud-upgrade-scripts.yaml
  args:
    apply:
      tags: create_undercloud_upgrade_scripts
  tags: always
  when: >
      upgrade_noop|bool or
      undercloud_upgrade|bool or
      undercloud_os_upgrade|bool

- block:
    - name: apply pre undercloud OS upgrade workarounds
      shell: |
        set -o pipefail
        ./pre_undercloud_os_upgrade_workarounds.sh 2>&1 {{ timestamper_cmd }} >> pre_undercloud_os_upgrade_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds|bool

    - name: Upgrade operating system
      become: true
      become_user: root
      import_tasks: ../common/undercloud_os_upgrade.yaml
      when: not use_oooq|bool

    - name: apply post undercloud OS upgrade workarounds
      shell: |
        set -o pipefail
        ./post_undercloud_os_upgrade_workarounds.sh 2>&1 {{ timestamper_cmd }} >> post_undercloud_os_upgrade_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds|bool

  when: undercloud_os_upgrade|bool
  tags: undercloud_os_upgrade

- block:
    - name: apply pre undercloud upgrade workarounds
      shell: |
        set -o pipefail
        ./pre_undercloud_upgrade_workarounds.sh 2>&1 {{ timestamper_cmd }} >> pre_undercloud_upgrade_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds

    - name: configure container specific parameters
      import_tasks: ../common/configure_uc_containers.yml

    - name: install/update required packages before upgrading the undercloud
      become: true
      become_user: root
      import_tasks: ../common/undercloud_prerequisites.yaml

    - name: upgrade undercloud
      shell: |
        set -o pipefail
        {{ undercloud_upgrade_script }} 2>&1 {{ timestamper_cmd }} >> undercloud_upgrade.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      tags: undercloud_upgrade

    - name: validate undercloud upgrade
      import_tasks: ../common/undercloud_validate_upgrade.yaml
      tags: undercloud_upgrade_validate

    - name: apply post undercloud upgrade workarounds
      shell: |
        set -o pipefail
        ./post_undercloud_upgrade_workarounds.sh 2>&1 {{ timestamper_cmd }} >> post_undercloud_upgrade_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds
  when: undercloud_upgrade|bool

- name: create overcloud upgrade scripts
  include_tasks: create-overcloud-upgrade-scripts.yaml
  args:
    apply:
      tags:
        - create_overcloud_upgrade_scripts
  tags: create_overcloud_upgrade_scripts
  when: >
    upgrade_noop|bool or
    overcloud_upgrade|bool

- block:
    - name: adjust role-data for upgrade
      include_tasks: ../common/adjust-roles-data.yaml
      when: custom_roles_used|bool
      tags: overcloud_upgrade_prepare

    - name: check customized {{ uc_containers_prepare_file }} exists
      stat:
        path: "{{ working_dir }}/{{ uc_containers_prepare_file }}"
      register: custom_uc_containers
      tags: overcloud_upgrade_prepare

    - name: Set the neutron_driver to ovn for the Overcloud upgrade if deployed with OVN
      replace:
        path: "{{ working_dir }}/{{ uc_containers_prepare_file }}"
        regexp: '^(\s*neutron_driver\s*:)(.*)'
        replace: '\1 ovn'
      when:
        - custom_uc_containers.stat.exists
        - deployment_with_ovn
      tags: overcloud_upgrade_prepare

    - import_tasks: overcloud_upgrade_prepare.yml
      tags: overcloud_upgrade_prepare

    - name: apply post overcloud upgrade prepare workarounds
      shell: |
        set -o pipefail
        ./post_overcloud_upgrade_prepare_workarounds.sh 2>&1 {{ timestamper_cmd }} >> post_overcloud_upgrade_prepare_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds
      tags: overcloud_upgrade_prepare

    - name: prepare containers for overcloud upgrade
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      shell: |
        set -o pipefail
        ./overcloud_prepare_containers.sh {{ timestamper_cmd }} >> overcloud_upgrade_prepare_containers.log
      tags: overcloud_upgrade_prepare_containers

    - name: Ensure ansible-pacemaker module is present in CI.
      package:
        name: ansible-pacemaker
        state: latest
      when: tripleo_ci|default(false)|bool
      tags: overcloud_upgrade_run
      become: true

    - name: apply pre overcloud upgrade workarounds
      shell: |
        set -o pipefail &7 \
        ./pre_overcloud_upgrade_workarounds.sh 2>&1 {{ timestamper_cmd }} >> pre_overcloud_upgrade_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds
      tags: overcloud_upgrade_run

    - name: launch workload
      shell: |
        set -o pipefail
        {{ workload_launch_script }} 2>&1 {{ timestamper_cmd }} >> workload_launch.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: workload_launch|bool

    - include_tasks: overcloud_upgrade_run.yml
      tags: overcloud_upgrade_run
      loop: "{{ oc_roles|default(['all']) }}"

    - name: apply post overcloud upgrade workarounds
      shell: |
        set -o pipefail
        ./post_overcloud_upgrade_workarounds.sh 2>&1 {{ timestamper_cmd }} >> post_overcloud_upgrade_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds
      tags: overcloud_upgrade_run

    ######## CEPH upgrade ########
    - name: apply pre Ceph upgrade workarounds
      shell: |
        set -o pipefail
        ./pre_ceph_upgrade_workarounds.sh 2>&1 {{ timestamper_cmd }} >> pre_ceph_upgrade_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds

    - name: upgrade Ceph
      include_tasks: ceph_upgrade_run.yml
      when: ceph_osd_enabled|bool

    - name: apply post Ceph upgrade workarounds
      shell: |
        set -o pipefail
        ./post_ceph_upgrade_workarounds.sh 2>&1 {{ timestamper_cmd }} >> post_ceph_upgrade_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds

    - name: run online data migration
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      shell: |
        set -o pipefail
        ./overcloud_online_data_migration.sh 2>&1 {{ timestamper_cmd }} >> overcloud_upgrade_data_migration.log

    ######## Overcloud upgrade converge ########
    - name: apply pre overcloud upgrade converge workarounds
      shell: |
        set -o pipefail
        ./pre_overcloud_upgrade_converge_workarounds.sh 2>&1 {{ timestamper_cmd }} >> pre_overcloud_upgrade_converge_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds
      tags: overcloud_upgrade_converge

    - import_tasks: overcloud_upgrade_converge.yml
      tags: overcloud_upgrade_converge

    - name: apply post overcloud upgrade converge workarounds
      shell: |
        set -o pipefail
        ./post_overcloud_upgrade_converge_workarounds.sh 2>&1 {{ timestamper_cmd }} >> post_overcloud_upgrade_converge_workarounds.log
      args:
        executable: /usr/bin/bash
        chdir: "{{ working_dir }}"
      when: upgrade_workarounds
      tags: overcloud_upgrade_converge

    - name: run controller post upgrade steps
      include_tasks: controller_post_upgrade.yml
      args:
        apply:
          tags:
            - controller_post_upgrade
      tags: controller_post_upgrade
      when: controller_upgrade_post|bool

    - import_tasks: ../common/nova_actions_check.yml

  when: overcloud_upgrade|bool
