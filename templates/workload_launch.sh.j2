#!/bin/bash
#
# Script that spawns an instance
# Has 3 operational modes:
#   - workload: spawn VM with floating ip (default) or external ip in case of
#               SRIOV
#   - sanity:   spawn VM with floating/external ip assert it's ssh'able,
#               delete VM and associated resources
#   - sanityfast: same than sanity but fails faster
#
#   - cleanup:  clean up VM and other elements created previously
#
set -o pipefail

IN_TEARDOWN=false
FAST=""

if [[ -n ${1} ]]; then
    MODE="${1}"
else
    MODE="workload"
fi

# Run openstack command with an error check. This will trigger the
# cleanup_on_exit trap for sanity and sanityfast mode. This doesn't
# work for command expansion - $(...) expression.
function os_cmd {
    set -e
    openstack "$@"
    set +e
}

# This function get installed as a trap in sanity and sanityfast.
cleanup_on_exit() {
    RC=$?
    echo "Tearing down with rc=$RC"
    set +e
    # We guard against failure during teardown.
    if ! ${IN_TEARDOWN}; then
        if [ -n "${FAST}" ]; then
            sanity_teardown $FAST
        else
            sanity_teardown
        fi
    else
        # We are in teardown, just abort.
        echo "Failed during Teardown."
        exit 64
    fi
    if [ -n "${INSTANCE_NAME}" -a -e "${HOME}/${INSTANCE_NAME}" ]; then
        echo "Deleting ~/${INSTANCE_NAME}"
        rm -f "${HOME}/${INSTANCE_NAME}"
    fi
    exit $RC
}

function prepare_env {

    export OVERCLOUD_RC='{{ overcloud_rc }}'
    export IMAGE_URL='{{ workload_image_url }}'
    export IMAGE_NAME="upgrade_workload_${SUFFIX}"
    export IMAGE_FILE="$(mktemp -d )/upgrade_workload_image.qcow2"
    export INSTANCE_NAME="instance_${SUFFIX}"
    export INSTANCE_USER='{{ workload_user }}'
    export KEYPAIR_NAME="userkey_${SUFFIX}"
    export FLAVOR_NAME="v1-{{ workload_memory }}M-{{ workload_disk }}G-${SUFFIX}"
    export SECGROUP_NAME="allow-icmp-ssh-${SUFFIX}"
    export TENANT_NET_NAME="internal_net_${SUFFIX}"
    export EXTERNAL_NET_NAME='{{ external_network_name }}'
    export SRIOV_PORT="sriov_port_${SUFFIX}"

    source ${OVERCLOUD_RC}
    {% if ffu_overcloud_upgrade | bool -%}
    # Pin the API's to Train max versions
    export OS_COMPUTE_API_VERSION=2.79
    export OS_SHARE_API_VERSION=2.51
    export OS_VOLUME_API_VERSION=3.59
    {% elif overcloud_upgrade | bool -%}
    # Pin the API's to Victoria max versions
    export OS_COMPUTE_API_VERSION=2.87
    export OS_SHARE_API_VERSION=2.57
    export OS_VOLUME_API_VERSION=3.62
    {%- endif %}
}

function sanity_check {
    local timeout_seconds=${1:-180}
    local elapsed_seconds=0

    echo "Waiting for compute services to be up"

    until openstack compute service list --service nova-compute -c State -f value | grep -qv down && openstack network agent list -f value -c Alive | grep -qv False; do
        if [ $elapsed_seconds -ge $timeout_seconds ]; then
            echo "FAILURE: Some nova-compute or neutron services are down"
            openstack compute service list --service nova-compute
            openstack network agent list
            exit 1
        fi
        sleep 5
        elapsed_seconds=$(( ${elapsed_seconds} + 5 ))
    done
    echo "All compute services are up and running"
}

function sanity_teardown {
    IN_TEARDOWN=true
    # remove auxiliary resources

    local timeout_seconds=${1:-180}
    local elapsed_seconds=0
    {% if workload_sriov | bool -%}
    openstack port delete ${SRIOV_PORT}
    {% else -%}
    if [ -n "${INSTANCE_FIP}" ]; then
        echo "Remove ${INSTANCE_FIP} from ${INSTANCE_NAME}"
        openstack server remove floating ip ${INSTANCE_NAME} ${INSTANCE_FIP}
        grep ${INSTANCE_FIP} vm_ip.sh  && rm vm_ip.sh

        echo "Delete floating ip ${INSTANCE_FIP}"
        openstack floating ip delete ${INSTANCE_FIP}
    fi

    {%- endif %}

    echo "Remove VM ${INSTANCE_NAME}"
    openstack server delete ${INSTANCE_NAME}
    while true; do
        openstack server list -f value -c Name | grep -q ${INSTANCE_NAME}
        if [[ ${?} -eq 1 ]]; then
            echo "Instance ${INSTANCE_NAME} successfully removed"
            break
        fi
        sleep 5
        elapsed_seconds=$((elapsed_seconds + 5))
        if [ $elapsed_seconds -ge $timeout_seconds ]; then
            echo "FAILURE: Failed to remove instance ${INSTANCE_NAME}"
            exit 1
        fi
    done

    if [ -n "${CINDER_VOL_ID}" ]; then
        echo "Remove cinder volume ${CINDER_VOL_ID}"
        openstack volume delete ${CINDER_VOL_ID}

        elapsed_seconds=0
        while true; do
            openstack volume list -f value -c ID | grep -q ${CINDER_VOL_ID}
            if [[ ${?} -eq 1 ]]; then
                echo "The volume ${CINDER_VOL_ID} successfully removed"
                break
            fi

            sleep 5
            elapsed_seconds=$((elapsed_seconds + 5 ))

            if [ $elapsed_seconds -ge $timeout_seconds ]; then
                echo "FAILURE: Failed to remove the volume ${CINDER_VOL_ID}"
                exit 1
            fi
        done
    fi
    echo "Clear default gateway from ${TENANT_NET_NAME}_router"
    openstack router unset --external-gateway ${TENANT_NET_NAME}_router

    echo "Remove subnet ${TENANT_NET_NAME}_subnet from router ${TENANT_NET_NAME}_router"
    openstack router remove subnet ${TENANT_NET_NAME}_router ${TENANT_NET_NAME}_subnet

    echo "Remove router ${TENANT_NET_NAME}_router"
    openstack router delete ${TENANT_NET_NAME}_router

    echo "Remove subnet ${TENANT_NET_NAME}_subnet"
    openstack subnet delete ${TENANT_NET_NAME}_subnet

    echo "Remove network ${TENANT_NET_NAME}"
    openstack network delete ${TENANT_NET_NAME}

    echo "Remove security group ${SECGROUP_NAME}"
    openstack security group delete ${SECGROUP_NAME}

    echo "Remove keypair ${KEYPAIR_NAME}"
    openstack keypair delete ${KEYPAIR_NAME}

    echo "Remove image ${IMAGE_NAME}"
    openstack image delete ${IMAGE_NAME}

    echo "Remove flavor ${FLAVOR_NAME}"
    openstack flavor delete ${FLAVOR_NAME}

    echo "Remove file ${IMAGE_FILE}"
    rm -Rf $(dirname ${IMAGE_FILE})
    IN_TEARDOWN=false
}

function workload_launch {
    # create workload
    timeout_seconds=${1:-120}
    ssh_timeout_seconds=${1:-180}

    ## create image
    openstack image list | grep ${IMAGE_NAME}

    if [ $? -ne 0 ]; then
        echo "Downloading image ${IMAGE_URL}"
        curl -4fsSLk --retry 5 -o ${IMAGE_FILE} ${IMAGE_URL}

        if [ $? -ne 0 ]; then
            echo "Failed to download ${IMAGE_URL}"
            exit 1
        fi

        echo "Uploading ${IMAGE_NAME} to Glance"
        openstack image create \
            --file ${IMAGE_FILE} \
            --disk-format qcow2 \
            --container-format bare \
            ${IMAGE_NAME}
    fi

    ## create user key
    openstack keypair list | grep ${KEYPAIR_NAME}
    if [ $? -ne 0 ]; then
        echo "Creating keypair ${KEYPAIR_NAME}"
        os_cmd keypair create --public-key ~/.ssh/id_rsa.pub ${KEYPAIR_NAME}
    fi

    ## create flavor
    openstack flavor list | grep ${FLAVOR_NAME}
    if [ $? -ne 0 ]; then
        echo "Creating flavor ${FLAVOR_NAME}"
        os_cmd flavor create --vcpus {{ workload_vcpu }} \
            --ram {{ workload_memory }} \
            --disk {{ workload_disk }} \
            --swap {{ workload_swap }} \
            $FLAVOR_NAME
    fi

    ## create networking
    openstack network list | grep ${TENANT_NET_NAME}
    if [ $? -ne 0 ]; then
        NAMESERVER=$(grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' /etc/resolv.conf  | head -1)
        echo "Creating router ${TENANT_NET_NAME}_router"
        os_cmd router create ${TENANT_NET_NAME}_router

        echo "Creating network ${TENANT_NET_NAME}"
        os_cmd network create ${TENANT_NET_NAME}

        echo "Creating subnet ${TENANT_NET_NAME}_subnet"
        os_cmd subnet create \
            --subnet-range 192.168.0.0/24 \
            --allocation-pool start=192.168.0.10,end=192.168.0.100 \
            --gateway 192.168.0.254 \
            --dns-nameserver ${NAMESERVER} \
            --network ${TENANT_NET_NAME} \
            ${TENANT_NET_NAME}_subnet

        echo "Add subnet ${TENANT_NET_NAME}_subnet to router ${TENANT_NET_NAME}_router"
        os_cmd router add subnet  ${TENANT_NET_NAME}_router ${TENANT_NET_NAME}_subnet

        echo "Set external-gateway for ${TENANT_NET_NAME}_router"
        os_cmd router set --external-gateway ${EXTERNAL_NET_NAME} ${TENANT_NET_NAME}_router
    fi

    ## create security group
    openstack security group list | grep ${SECGROUP_NAME}
    if [ $? -ne 0 ]; then
        echo "Creating security group ${SECGROUP_NAME}"
        os_cmd security group create ${SECGROUP_NAME}

        echo "Creating rules for ports 22,80,443 in security group ${SECGROUP_NAME}"
        os_cmd security group rule create --proto icmp ${SECGROUP_NAME}
        os_cmd security group rule create --proto tcp --dst-port 22 ${SECGROUP_NAME}
        os_cmd security group rule create --proto tcp --dst-port 80 ${SECGROUP_NAME}
        os_cmd security group rule create --proto tcp --dst-port 443 ${SECGROUP_NAME}
    fi

    {% if workload_sriov | bool -%}
    ## create sriov port
    openstack port create --vnic-type direct --network ${EXTERNAL_NET_NAME} \
        --binding-profile trusted=true ${SRIOV_PORT}
    {%- endif %}



    ## create instance
    TENANT_NET_ID=$( openstack network show -f json ${TENANT_NET_NAME} |  jq -r -c '.id' )

    echo "Creating overcloud instance ${INSTANCE_NAME}"
    {% if workload_sriov | bool -%}
    os_cmd server create  \
        --image ${IMAGE_NAME} \
        --flavor ${FLAVOR_NAME} \
        --key-name  ${KEYPAIR_NAME} \
        --port ${SRIOV_PORT} \
        ${INSTANCE_NAME}
    {% else -%}
    os_cmd server create  \
        --image ${IMAGE_NAME} \
        --flavor ${FLAVOR_NAME} \
        --security-group ${SECGROUP_NAME} \
        --key-name  ${KEYPAIR_NAME} \
        --nic net-id=${TENANT_NET_ID} \
        ${INSTANCE_NAME}
    {%- endif %}

    elapsed_seconds=0
    while true; do
        INSTANCE_STATUS=$(os_cmd server show ${INSTANCE_NAME} -f json | jq -r '.status')
        case "${INSTANCE_STATUS}" in
            "ACTIVE")
                echo "${INSTANCE_NAME} reached 'ACTIVE' status"
                break
                ;;
            "ERROR")
                echo "${INSTANCE_NAME} failed"
                exit 1
        esac
        sleep 3
        elapsed_seconds=$((elapsed_seconds + 3))
        if [ $elapsed_seconds -ge $timeout_seconds ]; then
            echo "FAILURE: Instance failed to boot within ${elapsed_seconds} seconds"
            openstack server show ${INSTANCE_NAME} -f json 2>&1
            exit 1
        fi
    done

    ## assign floating ip or external ip
    {% if workload_sriov | bool -%}
    EXTERNAL_IP=$(os_cmd port show ${SRIOV_PORT} -f json -c fixed_ips | jq -r -c '.fixed_ips[0]["ip_address"]')
    VM_IP=${EXTERNAL_IP}
    {% else -%}
    INSTANCE_FIP=$(os_cmd floating ip create ${EXTERNAL_NET_NAME} -f json | jq -r -c '.floating_ip_address' )

    if [ -z "${INSTANCE_FIP}" ]; then
        echo "Cannot get a new FIP"
        exit 66
    fi
    echo "Assign FIP[${INSTANCE_FIP}] to server ${INSTANCE_NAME}"
    os_cmd server add floating ip ${INSTANCE_NAME} ${INSTANCE_FIP}
    VM_IP="${INSTANCE_FIP}"

    {%- endif %}

    ## create and attach a volume
    ## The cinder resource must be created and available to be attach
    CINDER_VOL_ID=$(os_cmd volume create --size 1 vol_${SUFFIX} -f json | jq -r .id)

    elapsed_seconds=0
    if [ -n "${CINDER_VOL_ID}" ]; then
        while true; do
            VOL_STATUS=$(os_cmd volume show ${CINDER_VOL_ID} -f value -c status)
            if [[ ${VOL_STATUS} == "available" ]]; then
                echo "The volume ${CINDER_VOL_ID} successfully created and available"
                break
            fi

            sleep 5
            elapsed_seconds=$((elapsed_seconds + 5))

            if [ $elapsed_seconds -ge $timeout_seconds ]; then
                echo "FAILURE: Failed to create the volume ${CINDER_VOL_ID}"
                exit 1
            fi
        done
    else
        echo "FAILURE: could not create the volume."
        exit 65
    fi

    echo "Attach volume vol_${SUFFIX} to instance ${INSTANCE_NAME}"
    os_cmd server add volume ${INSTANCE_NAME} ${CINDER_VOL_ID}

    ## SSH to VM through it's floating ip or external ip
    elapsed_seconds=0
    while true; do
        # assert instance is reachable via ssh
        echo "  [$(date)] Trying to ssh to ${VM_IP}"
        ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            ${INSTANCE_USER}@${VM_IP} 'whoami'
        if [[ ${?} -eq 0 ]]; then
            echo "Instance ${INSTANCE_NAME} is reachable via ${VM_IP}"
            echo "Write VM_IP ${VM_IP} to file"
            echo "vm-ip: ${VM_IP}" > ~/${INSTANCE_NAME}
            break
        fi
        sleep 3
        elapsed_seconds=$((elapsed_seconds + 3))
        if [ $elapsed_seconds -ge $ssh_timeout_seconds ]; then
            echo "FAILURE: Instance failed to boot."
            exit 1
        fi
    done
}

if [[ "${MODE}" == "workload" ]]; then
    SUFFIX=$(openssl rand -hex 5)
    prepare_env
    sanity_check
    workload_launch
    echo "export SUFFIX=${SUFFIX}" > ~/workload_suffix
    echo "export CINDER_VOL_ID=${CINDER_VOL_ID}" >> ~/workload_suffix
    echo "export INSTANCE_FIP=${INSTANCE_FIP}" >> ~/workload_suffix
fi

if [[ "${MODE}" == "cleanup" ]]; then
    # obtain SUFFIX value generated during workload_launch
    source ~/workload_suffix
    prepare_env
    sanity_check
    # cleanup workload
    sanity_teardown
fi

if [[ "${MODE}" == "sanity" ]]; then
    trap cleanup_on_exit EXIT
    SUFFIX=$(openssl rand -hex 5)
    prepare_env
    sanity_check
    workload_launch
fi

if [[ "${MODE}" == "sanityfast" ]]; then
    FAST=10
    trap cleanup_on_exit EXIT
    SUFFIX=$(openssl rand -hex 5)
    prepare_env
    sanity_check $FAST
    workload_launch $FAST $FAST
fi
